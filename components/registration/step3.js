const texts = [
    { text: "Processing file...", delay: 2000 },
    { text: "Minting NFT...", delay: 10000 },
    { text: "Saving Metadata...", delay: 2000 },
    { text: "Finishing...", delay: 1000000 }
];

let currentIndex = 0;
let animationActive = false;
function step3Component() {
    return /*html */`
    <div class="main-content bg-light first-card starting-card ">
        <div class="card-body" id="consents-content">
            <div class="consent-text">
                <h5>WEB3 VCF ANNOTATOR SERVICE AND BIONFT TOKENIZATION AGREEMENT</h5>
                <p><strong>Effective Date: <span id="current-date"></span></strong></p>
                
                <p>By accepting this agreement, User acknowledges and consents to the following terms regarding the analysis, tokenization, and ownership rights of their genomic data through the Web3 VCF Annotator Server developed by GenoBank.io ("GenoBank").</p>
                
                <ol>
                    <li><strong>VCF ANNOTATION SERVICE:</strong> The Web3 VCF Annotator Server is designed specifically to analyze Variant Call Format (VCF) files, providing comprehensive genetic analysis reports and ancestry information. The annotation process utilizes advanced bioinformatics algorithms to analyze genetic variants while ensuring User maintains complete ownership and control of their genetic information throughout the entire process.</li>
                    
                    <li><strong>BIONFT CREATION AND TOKENIZATION:</strong> Analysis results from the VCF Annotator will be tokenized as a BioNFT™ (Biological Non-Fungible Token) on the Avalanche blockchain, creating an immutable and verifiable digital record of User's genomic data ownership. This tokenization process establishes cryptographic proof of User's genetic data ownership while enabling User to securely share, transfer, or revoke access to their analysis results through blockchain mechanisms.</li>
                    
                    <li><strong>STORY PROTOCOL INTEGRATION:</strong> The VCF Annotator incorporates Story Protocol technology to enhance User's control over their BioNFT™. This integration enables:
                        <ol type="a">
                            <li>Verifiable creation and ownership records of User's genetic analysis;</li>
                            <li>Configurable permission settings for data access and usage;</li>
                            <li>Transparent tracking of any authorized data usage;</li>
                            <li>Enhanced intellectual property protection for User's biological information.</li>
                        </ol>
                        This integration provides User with unprecedented control over their genomic analysis while maintaining full sovereignty over their genetic data.
                    </li>
                    
                    <li><strong>TOKENIZATION PROCESS:</strong> Upon completion of VCF analysis, the following tokenization process will occur:
                        <ol type="a">
                            <li>Analysis results will be cryptographically secured;</li>
                            <li>A unique BioNFT™ will be minted on the Avalanche blockchain;</li>
                            <li>The BioNFT™ will contain metadata linking to User's analysis results;</li>
                            <li>Ownership of the BioNFT™ will be assigned to User's wallet address;</li>
                            <li>A permanent record of ownership will be established on the blockchain.</li>
                        </ol>
                        This process creates a secure, verifiable record of ownership without transferring any rights to GenoBank or third parties.
                    </li>
                    
                    <li><strong>OWNERSHIP OF GENETIC DATA AND ANALYSIS:</strong> User retains exclusive and complete ownership of:
                        <ol type="a">
                            <li>All raw genetic data uploaded to the VCF Annotator;</li>
                            <li>All analysis results generated by the VCF Annotator;</li>
                            <li>The BioNFT™ representing ownership of these analysis results;</li>
                            <li>All rights to control access, sharing, or commercial utilization of their genetic information.</li>
                        </ol>
                        The tokenization process reinforces rather than diminishes User's ownership rights.
                    </li>
                    
                    <li><strong>DATA USAGE LIMITATIONS:</strong> GenoBank will only use User's genomic data for:
                        <ol type="a">
                            <li>Performing the specific VCF annotation and analysis requested by User;</li>
                            <li>Creating the blockchain-based BioNFT™ of ownership rights;</li>
                            <li>Maintaining necessary technical infrastructure for service delivery;</li>
                            <li>Complying with applicable legal requirements.</li>
                        </ol>
                        Any additional usage beyond these specific purposes requires explicit new consent from User.
                    </li>
                    
                    <li><strong>DATA SECURITY AND BLOCKCHAIN BENEFITS:</strong> GenoBank employs multiple layers of security to protect User's genetic data:
                        <ol type="a">
                            <li>Industry-standard encryption for data transmission and storage;</li>
                            <li>Secure API architecture for the VCF Annotator Server;</li>
                            <li>Blockchain-based verification of data integrity and ownership;</li>
                            <li>Decentralized ownership records that prevent unauthorized data access or transfer.</li>
                        </ol>
                        The blockchain tokenization provides an enhanced security framework by creating an immutable, tamper-proof record of ownership and consent.
                    </li>
                    
                    <li><strong>OWNERSHIP REGISTRATION CONFIRMATION:</strong> By proceeding, User confirms their intention to:
                        <ol type="a">
                            <li>Utilize the Web3 VCF Annotator Server for genomic analysis;</li>
                            <li>Create a BioNFT™ representing ownership of their analysis results;</li>
                            <li>Establish an immutable blockchain record of their genetic data ownership;</li>
                            <li>Maintain complete control over how their genetic information and analysis may be used.</li>
                        </ol>
                    </li>
                    
                    <li><strong>GOVERNING LAW:</strong> This agreement shall be governed by the laws of User's jurisdiction of residence and applicable federal laws governing genetic data privacy and digital assets.</li>
                </ol>
            </div>
        </div>
        <div class="form-check mt-5  m-3">
            <input class="form-check-input custom-checkbox" type="checkbox" value="" id="flexCheckDefault" onchange="validateAgreement()">
            <label class="form-check-label ms-2" for="flexCheckDefault" >
                I acknowledge that I have read and understood the above agreement and consent to the analysis of my VCF data through the Web3 VCF Annotator Server and the creation of a BioNFT™ representing ownership of my analysis results.
            </label>

            <div class="d-grid gap-2 mt-3">
                <button class="btn btn-somos me-md-2" type="button" onclick="finalize()" disabled id="btn-finalize">Sign Agreement</button>
                <button class="btn btn-secondary me-md-2" type="button" onclick="prevStep()">Back</button>
            </div>
        </div>
        <div class="progress" style="height: 4px;">
            <div class="progress-bar bg-danger" id="id-progress-uploading-file" role="progressbar" style="width: 0%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
        <div id="progress-text-info" style="display: block;">
            <div class="text-center H1 fs-6" id="dinamic-progress-text">
            </div>
        </div>
    </div>
    `
}


function showModalError(title, message, options = {}) {
    stopProgressAnimation();
    const defaults = {
        closeButtonText: '<i class="fa-solid fa-person-walking-arrow-loop-left"></i> Previous step', 
        modalSize: 'dialog-centered modal-lg ',
        modalId: 'errorModal_' + Date.now(),
        onClose: null
    };
    const settings = {...defaults, ...options};
    const existingModal = document.getElementById(settings.modalId);
    if (existingModal) {
        existingModal.remove();
    }
    const modalHTML = /*html */`
    <div class="modal fade" id="${settings.modalId}" tabindex="-1" aria-labelledby="${settings.modalId}Label" aria-hidden="true" data-bs-backdrop="static">
        <div class="modal-dialog ${settings.modalSize ? 'modal-' + settings.modalSize : ''}">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="${settings.modalId}Label">${title}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    ${message}
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="prevStep()">${settings.closeButtonText}</button>
                </div>
            </div>
        </div>
    </div>
    `;
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    const modalElement = document.getElementById(settings.modalId);
    if (typeof settings.onClose === 'function') {
        modalElement.addEventListener('hidden.bs.modal', settings.onClose);
    }
    modalElement.addEventListener('hidden.bs.modal', function() {
        modalElement.remove();
    });
    const bsModal = new bootstrap.Modal(modalElement);
    bsModal.show();
    return bsModal;
}

function animateProgressiveText() {
    if (!animationActive) return;
    const textContainer = $("#dinamic-progress-text");
    console.log("currentIndex", currentIndex);
    const currentText = texts[currentIndex];
    console.log("currentText", currentText);
    textContainer.html(currentText.text);
    currentIndex = (currentIndex + 1) % texts.length;
    if (animationActive) {
        setTimeout(animateProgressiveText, currentText.delay);
    }
}

function startProgressAnimation() {
    animationActive = true;
    currentIndex = 0; // Reset index
    animateProgressiveText();
}

// Function to stop the animation
function stopProgressAnimation() {
    animationActive = false;
    // Clear the text
    $("#dinamic-progress-text").html("");
}

function validateAgreement(){
    $("#btn-finalize").prop('disabled', !$("#flexCheckDefault").is(':checked'));
}

async function finalize() {
    try{
        $("#btn-finalize").prop('disabled', true);
        $("#btn-finalize").html(`
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        `)
        const consentsText = getConsentsText();
        const signedConsents = await signPersonalMessage(consentsText)
        registerFormData["signedConsents"] = signedConsents
        const data = new FormData();
        data.append("data", JSON.stringify(registerFormData));
        data.append("file", fileToUpload);
        const response = await postAxiosRegisterUser(data, onUploadingFile);
        if (response.status === 200){
            fileUploadedData = response.data
            const registration = await getRegisteredUser(getUserToken())
            const isRegistered = !isEmpty(registration.register)
            if (isRegistered) {
                setLocalRegistration(registration)
                nextStep()
            }else{
                stopProgressAnimation();
                const userCurrentWallet = getUserWallet()
                const errorTitle = "Registration Process Failed";
                const errorMessage = /*html */`
                    <p>Your registration could not be completed.</p>
                    <p>Please return to step 2 and try again. If you think this is an error, please contact us at <a href="mailto:support@genobank.io">support@genobank.io</a> and include your wallet information.</p>
                    <p>Wallet: <strong>${userCurrentWallet} </strong> </p>
                `;
                showModalError(errorTitle, errorMessage)
            }
        }
    }catch(e){
        console.log("error to show on modal", e)
        stopProgressAnimation();
        const errotTitle = e?.response?.data?.status || "Error"
        const errorMessage = e?.response?.data?.status_details?.description || "An error ocurred during the registration process, please return to step 2 and try again."
        showModalError(errotTitle, errorMessage)
    }
    finally{
        $("#btn-finalize").prop('disabled', false);
        $("#btn-finalize").html(`Sign Agreement`)
    }
}



function onUploadingFile (progressEvent) {
    $("#progress-text-info").show();
    const percentCompleted = (progressEvent.loaded / progressEvent.total) * 100;
    $("#id-progress-uploading-file").attr('style',`width: ${Math.round(percentCompleted)}%`)
    if (percentCompleted == 100){
        startProgressAnimation();
    }
}

function getConsentsText() {
    const consentsContent = document.getElementById('consents-content');
    const textWithoutHtml = consentsContent.innerText || consentsContent.textContent;
    return textWithoutHtml;
}